// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminOperatorChange extends ethereum.Event {
  get params(): AdminOperatorChange__Params {
    return new AdminOperatorChange__Params(this);
  }
}

export class AdminOperatorChange__Params {
  _event: AdminOperatorChange;

  constructor(event: AdminOperatorChange) {
    this._event = event;
  }

  get oldOperator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOperator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AdminTransferInvoked extends ethereum.Event {
  get params(): AdminTransferInvoked__Params {
    return new AdminTransferInvoked__Params(this);
  }
}

export class AdminTransferInvoked__Params {
  _event: AdminTransferInvoked;

  constructor(event: AdminTransferInvoked) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AuthorizedOperator extends ethereum.Event {
  get params(): AuthorizedOperator__Params {
    return new AuthorizedOperator__Params(this);
  }
}

export class AuthorizedOperator__Params {
  _event: AuthorizedOperator;

  constructor(event: AuthorizedOperator) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenHolder(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Burned extends ethereum.Event {
  get params(): Burned__Params {
    return new Burned__Params(this);
  }
}

export class Burned__Params {
  _event: Burned;

  constructor(event: Burned) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class InflationMint extends ethereum.Event {
  get params(): InflationMint__Params {
    return new InflationMint__Params(this);
  }
}

export class InflationMint__Params {
  _event: InflationMint;

  constructor(event: InflationMint) {
    this._event = event;
  }

  get currentAccruedInflation(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get withdrawn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get target(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RelayHubChanged extends ethereum.Event {
  get params(): RelayHubChanged__Params {
    return new RelayHubChanged__Params(this);
  }
}

export class RelayHubChanged__Params {
  _event: RelayHubChanged;

  constructor(event: RelayHubChanged) {
    this._event = event;
  }

  get oldRelayHub(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newRelayHub(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RevokedOperator extends ethereum.Event {
  get params(): RevokedOperator__Params {
    return new RevokedOperator__Params(this);
  }
}

export class RevokedOperator__Params {
  _event: RevokedOperator;

  constructor(event: RevokedOperator) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenHolder(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Sent extends ethereum.Event {
  get params(): Sent__Params {
    return new Sent__Params(this);
  }
}

export class Sent__Params {
  _event: Sent;

  constructor(event: Sent) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Contract__acceptRelayedCallResult {
  value0: BigInt;
  value1: Bytes;

  constructor(value0: BigInt, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  acceptRelayedCall(
    relay: Address,
    from: Address,
    encodedFunction: Bytes,
    transactionFee: BigInt,
    gasPrice: BigInt,
    gasLimit: BigInt,
    nonce: BigInt,
    approvalData: Bytes,
    param8: BigInt
  ): Contract__acceptRelayedCallResult {
    let result = super.call(
      "acceptRelayedCall",
      "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256):(uint256,bytes)",
      [
        ethereum.Value.fromAddress(relay),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromBytes(encodedFunction),
        ethereum.Value.fromUnsignedBigInt(transactionFee),
        ethereum.Value.fromUnsignedBigInt(gasPrice),
        ethereum.Value.fromUnsignedBigInt(gasLimit),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromBytes(approvalData),
        ethereum.Value.fromUnsignedBigInt(param8)
      ]
    );

    return new Contract__acceptRelayedCallResult(
      result[0].toBigInt(),
      result[1].toBytes()
    );
  }

  try_acceptRelayedCall(
    relay: Address,
    from: Address,
    encodedFunction: Bytes,
    transactionFee: BigInt,
    gasPrice: BigInt,
    gasLimit: BigInt,
    nonce: BigInt,
    approvalData: Bytes,
    param8: BigInt
  ): ethereum.CallResult<Contract__acceptRelayedCallResult> {
    let result = super.tryCall(
      "acceptRelayedCall",
      "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256):(uint256,bytes)",
      [
        ethereum.Value.fromAddress(relay),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromBytes(encodedFunction),
        ethereum.Value.fromUnsignedBigInt(transactionFee),
        ethereum.Value.fromUnsignedBigInt(gasPrice),
        ethereum.Value.fromUnsignedBigInt(gasLimit),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromBytes(approvalData),
        ethereum.Value.fromUnsignedBigInt(param8)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__acceptRelayedCallResult(
        value[0].toBigInt(),
        value[1].toBytes()
      )
    );
  }

  adminOperator(): Address {
    let result = super.call("adminOperator", "adminOperator():(address)", []);

    return result[0].toAddress();
  }

  try_adminOperator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "adminOperator",
      "adminOperator():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(holder: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(holder), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    holder: Address,
    spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(holder), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(tokenHolder: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(tokenHolder)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(tokenHolder: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(tokenHolder)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  defaultOperators(): Array<Address> {
    let result = super.call(
      "defaultOperators",
      "defaultOperators():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_defaultOperators(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "defaultOperators",
      "defaultOperators():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getHubAddr(): Address {
    let result = super.call("getHubAddr", "getHubAddr():(address)", []);

    return result[0].toAddress();
  }

  try_getHubAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("getHubAddr", "getHubAddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getInflation(): BigInt {
    let result = super.call("getInflation", "getInflation():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getInflation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getInflation", "getInflation():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  granularity(): BigInt {
    let result = super.call("granularity", "granularity():(uint256)", []);

    return result[0].toBigInt();
  }

  try_granularity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("granularity", "granularity():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gsnExtraGas(): BigInt {
    let result = super.call("gsnExtraGas", "gsnExtraGas():(uint256)", []);

    return result[0].toBigInt();
  }

  try_gsnExtraGas(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("gsnExtraGas", "gsnExtraGas():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gsnFeeTarget(): Address {
    let result = super.call("gsnFeeTarget", "gsnFeeTarget():(address)", []);

    return result[0].toAddress();
  }

  try_gsnFeeTarget(): ethereum.CallResult<Address> {
    let result = super.tryCall("gsnFeeTarget", "gsnFeeTarget():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gsnTrustedSigner(): Address {
    let result = super.call(
      "gsnTrustedSigner",
      "gsnTrustedSigner():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_gsnTrustedSigner(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "gsnTrustedSigner",
      "gsnTrustedSigner():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  inflationAmounts(param0: BigInt): BigInt {
    let result = super.call(
      "inflationAmounts",
      "inflationAmounts(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_inflationAmounts(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "inflationAmounts",
      "inflationAmounts(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  inflationOwner(): Address {
    let result = super.call("inflationOwner", "inflationOwner():(address)", []);

    return result[0].toAddress();
  }

  try_inflationOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "inflationOwner",
      "inflationOwner():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  inflationStartTime(): BigInt {
    let result = super.call(
      "inflationStartTime",
      "inflationStartTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_inflationStartTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "inflationStartTime",
      "inflationStartTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  inflationTimeSpans(param0: BigInt): BigInt {
    let result = super.call(
      "inflationTimeSpans",
      "inflationTimeSpans(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_inflationTimeSpans(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "inflationTimeSpans",
      "inflationTimeSpans(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  inflationWithdrawnAmount(): BigInt {
    let result = super.call(
      "inflationWithdrawnAmount",
      "inflationWithdrawnAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_inflationWithdrawnAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "inflationWithdrawnAmount",
      "inflationWithdrawnAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isOperatorFor(operator: Address, tokenHolder: Address): boolean {
    let result = super.call(
      "isOperatorFor",
      "isOperatorFor(address,address):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(tokenHolder)
      ]
    );

    return result[0].toBoolean();
  }

  try_isOperatorFor(
    operator: Address,
    tokenHolder: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOperatorFor",
      "isOperatorFor(address,address):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(tokenHolder)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  preRelayedCall(context: Bytes): Bytes {
    let result = super.call(
      "preRelayedCall",
      "preRelayedCall(bytes):(bytes32)",
      [ethereum.Value.fromBytes(context)]
    );

    return result[0].toBytes();
  }

  try_preRelayedCall(context: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "preRelayedCall",
      "preRelayedCall(bytes):(bytes32)",
      [ethereum.Value.fromBytes(context)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  relayHubVersion(): string {
    let result = super.call(
      "relayHubVersion",
      "relayHubVersion():(string)",
      []
    );

    return result[0].toString();
  }

  try_relayHubVersion(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "relayHubVersion",
      "relayHubVersion():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(holder: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(holder),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    holder: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(holder),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get initialSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _gsnTrustedSigner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _gsnFeeTarget(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _inflationTimeSpans(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _inflationsAmounts(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get _adminOperator(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AdminTransferCall extends ethereum.Call {
  get inputs(): AdminTransferCall__Inputs {
    return new AdminTransferCall__Inputs(this);
  }

  get outputs(): AdminTransferCall__Outputs {
    return new AdminTransferCall__Outputs(this);
  }
}

export class AdminTransferCall__Inputs {
  _call: AdminTransferCall;

  constructor(call: AdminTransferCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class AdminTransferCall__Outputs {
  _call: AdminTransferCall;

  constructor(call: AdminTransferCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AuthorizeOperatorCall extends ethereum.Call {
  get inputs(): AuthorizeOperatorCall__Inputs {
    return new AuthorizeOperatorCall__Inputs(this);
  }

  get outputs(): AuthorizeOperatorCall__Outputs {
    return new AuthorizeOperatorCall__Outputs(this);
  }
}

export class AuthorizeOperatorCall__Inputs {
  _call: AuthorizeOperatorCall;

  constructor(call: AuthorizeOperatorCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AuthorizeOperatorCall__Outputs {
  _call: AuthorizeOperatorCall;

  constructor(call: AuthorizeOperatorCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class OperatorBurnCall extends ethereum.Call {
  get inputs(): OperatorBurnCall__Inputs {
    return new OperatorBurnCall__Inputs(this);
  }

  get outputs(): OperatorBurnCall__Outputs {
    return new OperatorBurnCall__Outputs(this);
  }
}

export class OperatorBurnCall__Inputs {
  _call: OperatorBurnCall;

  constructor(call: OperatorBurnCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OperatorBurnCall__Outputs {
  _call: OperatorBurnCall;

  constructor(call: OperatorBurnCall) {
    this._call = call;
  }
}

export class OperatorSendCall extends ethereum.Call {
  get inputs(): OperatorSendCall__Inputs {
    return new OperatorSendCall__Inputs(this);
  }

  get outputs(): OperatorSendCall__Outputs {
    return new OperatorSendCall__Outputs(this);
  }
}

export class OperatorSendCall__Inputs {
  _call: OperatorSendCall;

  constructor(call: OperatorSendCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OperatorSendCall__Outputs {
  _call: OperatorSendCall;

  constructor(call: OperatorSendCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PostRelayedCallCall extends ethereum.Call {
  get inputs(): PostRelayedCallCall__Inputs {
    return new PostRelayedCallCall__Inputs(this);
  }

  get outputs(): PostRelayedCallCall__Outputs {
    return new PostRelayedCallCall__Outputs(this);
  }
}

export class PostRelayedCallCall__Inputs {
  _call: PostRelayedCallCall;

  constructor(call: PostRelayedCallCall) {
    this._call = call;
  }

  get context(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get success(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get actualCharge(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get preRetVal(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class PostRelayedCallCall__Outputs {
  _call: PostRelayedCallCall;

  constructor(call: PostRelayedCallCall) {
    this._call = call;
  }
}

export class PreRelayedCallCall extends ethereum.Call {
  get inputs(): PreRelayedCallCall__Inputs {
    return new PreRelayedCallCall__Inputs(this);
  }

  get outputs(): PreRelayedCallCall__Outputs {
    return new PreRelayedCallCall__Outputs(this);
  }
}

export class PreRelayedCallCall__Inputs {
  _call: PreRelayedCallCall;

  constructor(call: PreRelayedCallCall) {
    this._call = call;
  }

  get context(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PreRelayedCallCall__Outputs {
  _call: PreRelayedCallCall;

  constructor(call: PreRelayedCallCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RevokeOperatorCall extends ethereum.Call {
  get inputs(): RevokeOperatorCall__Inputs {
    return new RevokeOperatorCall__Inputs(this);
  }

  get outputs(): RevokeOperatorCall__Outputs {
    return new RevokeOperatorCall__Outputs(this);
  }
}

export class RevokeOperatorCall__Inputs {
  _call: RevokeOperatorCall;

  constructor(call: RevokeOperatorCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeOperatorCall__Outputs {
  _call: RevokeOperatorCall;

  constructor(call: RevokeOperatorCall) {
    this._call = call;
  }
}

export class SendCall extends ethereum.Call {
  get inputs(): SendCall__Inputs {
    return new SendCall__Inputs(this);
  }

  get outputs(): SendCall__Outputs {
    return new SendCall__Outputs(this);
  }
}

export class SendCall__Inputs {
  _call: SendCall;

  constructor(call: SendCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SendCall__Outputs {
  _call: SendCall;

  constructor(call: SendCall) {
    this._call = call;
  }
}

export class SetAdminOperatorCall extends ethereum.Call {
  get inputs(): SetAdminOperatorCall__Inputs {
    return new SetAdminOperatorCall__Inputs(this);
  }

  get outputs(): SetAdminOperatorCall__Outputs {
    return new SetAdminOperatorCall__Outputs(this);
  }
}

export class SetAdminOperatorCall__Inputs {
  _call: SetAdminOperatorCall;

  constructor(call: SetAdminOperatorCall) {
    this._call = call;
  }

  get adminOperator_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAdminOperatorCall__Outputs {
  _call: SetAdminOperatorCall;

  constructor(call: SetAdminOperatorCall) {
    this._call = call;
  }
}

export class SetFeeTargetCall extends ethereum.Call {
  get inputs(): SetFeeTargetCall__Inputs {
    return new SetFeeTargetCall__Inputs(this);
  }

  get outputs(): SetFeeTargetCall__Outputs {
    return new SetFeeTargetCall__Outputs(this);
  }
}

export class SetFeeTargetCall__Inputs {
  _call: SetFeeTargetCall;

  constructor(call: SetFeeTargetCall) {
    this._call = call;
  }

  get _gsnFeeTarget(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeTargetCall__Outputs {
  _call: SetFeeTargetCall;

  constructor(call: SetFeeTargetCall) {
    this._call = call;
  }
}

export class SetGSNExtraGasCall extends ethereum.Call {
  get inputs(): SetGSNExtraGasCall__Inputs {
    return new SetGSNExtraGasCall__Inputs(this);
  }

  get outputs(): SetGSNExtraGasCall__Outputs {
    return new SetGSNExtraGasCall__Outputs(this);
  }
}

export class SetGSNExtraGasCall__Inputs {
  _call: SetGSNExtraGasCall;

  constructor(call: SetGSNExtraGasCall) {
    this._call = call;
  }

  get _gsnExtraGas(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetGSNExtraGasCall__Outputs {
  _call: SetGSNExtraGasCall;

  constructor(call: SetGSNExtraGasCall) {
    this._call = call;
  }
}

export class SetInflationOwnerCall extends ethereum.Call {
  get inputs(): SetInflationOwnerCall__Inputs {
    return new SetInflationOwnerCall__Inputs(this);
  }

  get outputs(): SetInflationOwnerCall__Outputs {
    return new SetInflationOwnerCall__Outputs(this);
  }
}

export class SetInflationOwnerCall__Inputs {
  _call: SetInflationOwnerCall;

  constructor(call: SetInflationOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetInflationOwnerCall__Outputs {
  _call: SetInflationOwnerCall;

  constructor(call: SetInflationOwnerCall) {
    this._call = call;
  }
}

export class SetTrustedSignerCall extends ethereum.Call {
  get inputs(): SetTrustedSignerCall__Inputs {
    return new SetTrustedSignerCall__Inputs(this);
  }

  get outputs(): SetTrustedSignerCall__Outputs {
    return new SetTrustedSignerCall__Outputs(this);
  }
}

export class SetTrustedSignerCall__Inputs {
  _call: SetTrustedSignerCall;

  constructor(call: SetTrustedSignerCall) {
    this._call = call;
  }

  get _gsnTrustedSigner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTrustedSignerCall__Outputs {
  _call: SetTrustedSignerCall;

  constructor(call: SetTrustedSignerCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get holder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawInflationCall extends ethereum.Call {
  get inputs(): WithdrawInflationCall__Inputs {
    return new WithdrawInflationCall__Inputs(this);
  }

  get outputs(): WithdrawInflationCall__Outputs {
    return new WithdrawInflationCall__Outputs(this);
  }
}

export class WithdrawInflationCall__Inputs {
  _call: WithdrawInflationCall;

  constructor(call: WithdrawInflationCall) {
    this._call = call;
  }
}

export class WithdrawInflationCall__Outputs {
  _call: WithdrawInflationCall;

  constructor(call: WithdrawInflationCall) {
    this._call = call;
  }
}
